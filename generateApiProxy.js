import {
    join as pathJoin,
    dirname as pathDirname,
    fromFileUrl
} from 'https://deno.land/std@0.224.0/path/mod.ts';

const __dirname = pathDirname(fromFileUrl(import.meta.url));

// 定義生成檔案的輸出路徑
const OUTPUT_PATH = pathJoin(__dirname, 'public', 'ajax', 'apiProxy.js');
// apiExecutor.js 相對於 apiProxy.js 的路徑
const API_EXECUTOR_RELATIVE_PATH = './apiExecutor.js';

/**
 * @private
 * 處理 API 呼叫的通用邏輯，包括錯誤處理。
 * 這個函數會被嵌入到生成的 apiProxy.js 中。
 *
 * 修正：此函式現在接收所有可能的參數 (data, queryParams, accept)，
 * 並根據 apiCallFn 的名稱 (get/delete vs. post/put) 調整傳遞給 api 的參數順序。
 *
 * @param {Function} apiCallFn - 實際執行 API 請求的函數 (e.g., api.get, api.post)。
 * @param {string} endpoint - API 端點名稱或已構建的完整路徑。
 * @param {any} [data=null] - 請求主體數據 (用於 POST/PUT)。
 * @param {Object} [queryParams={}] - 查詢參數 (用於 GET/DELETE/POST/PUT)。
 * @param {string|null} [accept=null] - Accept 標頭的值。
 * @returns {Promise<Object|string>} 成功時解析為伺服器回應的 JSON 物件或文本。
 * @throws {Error} 如果請求失敗或伺服器返回非 2xx 狀態碼。
 */
const handleApiCallFunctionContent = `
async function handleApiCall(apiCallFn, endpoint, data = null, queryParams = {}, accept = null) {
    try {
        let response;
        if (apiCallFn.name === 'get' || apiCallFn.name === 'delete') {
            // api.get 和 api.delete 期望參數順序為 (endpoint, queryParams, accept)
            response = await apiCallFn(endpoint, queryParams, accept);
        } else {
            // api.post 和 api.put 期望參數順序為 (endpoint, data, queryParams, accept)
            response = await apiCallFn(endpoint, data, queryParams, accept);
        }

        console.log(\`${endpoint} 成功:\`, response);
        return response;
    } catch (error) {
        console.error(\`${endpoint} 失敗:\`, error);
        throw error; // 將錯誤重新拋出，讓上層呼叫者處理顯示邏輯
    }
}
`;

/**
 * 生成 apiProxy.js 檔案的函數。
 * 此函數會動態檢查 Express 應用程式的路由，並據此生成前端代理。
 *
 * @param {any} app - Express 應用程式實例 (Deno 中可能不是直接的 Express 類型，因此使用 any)。
 */
export function generateApiProxyFile(app: any) {
    let proxyContent = `// This file is auto-generated by the server startup script.\n`;
    proxyContent += `// Do not edit this file directly in development mode.\n\n`;
    proxyContent += `import { api } from '${API_EXECUTOR_RELATIVE_PATH}';\n\n`;
    proxyContent += `/**\n * @private\n * 處理 API 呼叫的通用邏輯，包括錯誤處理。\n */\n`;
    proxyContent += handleApiCallFunctionContent; // 注入修正後的 handleApiCall
    proxyContent += `export const apiProxy = {\n`;

    // 遍歷 Express 路由器堆疊以查找路由
    // 假設 app._router.stack 結構與 Node.js Express 相似
    app._router.stack.forEach((layer: any) => {
        if (layer.route) {
            const route = layer.route;
            const fullPath = route.path; // e.g., '/api/users/:userId/orders/:orderId'

            if (!fullPath.startsWith('/api/')) {
                return;
            }

            // Remove '/api/' prefix from path for endpoint name/path that apiExecutor expects
            const endpointBase = fullPath.substring('/api/'.length); // e.g., 'todos/fetch'

            for (const method in route.methods) {
                if (route.methods[method]) {
                    const httpMethod = method.toLowerCase();
                    let paramsDeclaration = '';    // e.g., 'userId, orderId, queryParams = {}'
                    let functionBodyContent = '';  // Content inside the generated async function
                    
                    // JSDoc Description: Now purely generic or derived from route structure
                    let jsdocDescription = `呼叫 ${httpMethod.toUpperCase()} /${endpointBase} API。`;
                    let jsdocParams = '';          // e.g., '@param {string} userId'

                    // 生成 camelCase 的 proxy 方法名稱
                    let currentProxyMethodName;
                    const pathSegments = endpointBase.split('/');
                    
                    currentProxyMethodName = pathSegments.map((segment, index) => {
                        // 移除路徑參數 (e.g., ':id')
                        const cleanedSegment = segment.replace(/:([a-zA-Z0-9_]+)/g, '');
                        if (cleanedSegment === '') return ''; // 處理空片段 (例如 // 造成的)

                        // 第一個片段保持小寫，後續片段首字母大寫
                        if (index === 0) {
                            return cleanedSegment.charAt(0).toLowerCase() + cleanedSegment.slice(1);
                        }
                        return cleanedSegment.charAt(0).toUpperCase() + cleanedSegment.slice(1);
                    }).join('');

                    // 處理可能存在的 kebab-case (例如 my-api -> myApi)
                    currentProxyMethodName = currentProxyMethodName.replace(/-([a-z])/g, (match, p1) => p1.toUpperCase());

                    // Fallback for very simple paths like ":id" or empty string after cleanup
                    if (!currentProxyMethodName) { 
                        const firstPathParam = endpointBase.match(/:([a-zA-Z0-9_]+)/);
                        if (firstPathParam) {
                            currentProxyMethodName = firstPathParam[1].charAt(0).toLowerCase() + firstPathParam[1].slice(1);
                        } else {
                            currentProxyMethodName = 'rootEndpoint'; 
                        }
                    }


                    // --- Handle GET and DELETE requests with path and query parameters ---
                    if (httpMethod === 'get' || httpMethod === 'delete') {
                        const pathParamRegex = /:([a-zA-Z0-9_]+)/g;
                        const extractedPathParams = [];
                        // 使用 matchAll 確保正確提取所有路徑參數
                        for (const matchResult of endpointBase.matchAll(pathParamRegex)) {
                            extractedPathParams.push(matchResult[1]);
                        }
                        
                        // Build the function signature's parameter list
                        if (extractedPathParams.length > 0) {
                            paramsDeclaration = extractedPathParams.join(', ');
                            jsdocParams += extractedPathParams.map(p => `     * @param {string} ${p} - URL 路徑參數：${p}。\n`).join('');
                        }

                        // Always add optional queryParams object for GET/DELETE (convention)
                        if (paramsDeclaration) {
                            paramsDeclaration += ', ';
                        }
                        paramsDeclaration += 'queryParams = {}';
                        jsdocParams += `     * @param {Object} [queryParams] - 選填：額外的 URL 查詢參數物件。\n`;
                        jsdocParams += `     * @param {string} [accept=null] - 選填：Accept 標頭的值。\n`; // 新增 accept JSDoc

                        // Construct the endpoint path to be passed to api.get
                        const endpointPathEvaluated = endpointBase.replace(pathParamRegex, (match, p) => `\${${p}}`);
                        
                        // 呼叫 handleApiCall，並傳遞所有參數 (data 為 null)
                        functionBodyContent = `        const endpoint = \`${endpointPathEvaluated}\`;\n`;
                        functionBodyContent += `        return handleApiCall(api.${httpMethod}, endpoint, null, queryParams, accept);\n`; // 傳遞 null 給 data
                        paramsDeclaration += ', accept = null'; // 將 accept 加入參數宣告
                    } else { // --- Handle POST and PUT requests ---
                        // POST/PUT functions will now accept 'data' (for body) and 'queryParams')
                        let paramNameForBody = 'data'; 
                        let jsdocBodyType = 'Object'; // Default JSDoc type for body (assuming JSON object/array)

                        paramsDeclaration = paramNameForBody;
                        jsdocParams += `     * @param {${jsdocBodyType}} ${paramNameForBody} - 請求主體數據 (預期為 JSON 物件或陣列)。\n`;
                        
                        // Add queryParams for POST/PUT requests as well
                        paramsDeclaration += ', queryParams = {}';
                        jsdocParams += `     * @param {Object} [queryParams] - 選填：額外的 URL 查詢參數物件。\n`;
                        jsdocParams += `     * @param {string} [accept=null] - 選填：Accept 標頭的值。\n`; // 新增 accept JSDoc

                        // 呼叫 handleApiCall，並傳遞所有參數
                        functionBodyContent = `        const endpoint = '${endpointBase}';\n`;
                        functionBodyContent += `        return handleApiCall(api.${httpMethod}, endpoint, ${paramNameForBody}, queryParams, accept);\n`;
                        paramsDeclaration += ', accept = null'; // 將 accept 加入參數宣告
                    }

                    // Append the generated API method to proxyContent
                    proxyContent += `    /**\n`;
                    proxyContent += `     * ${jsdocDescription}\n`;
                    proxyContent += jsdocParams; // Includes @param from above logic
                    proxyContent += `     * @returns {Promise<Object|string>} 回應數據。\n`;
                    proxyContent += `     */\n`;
                    proxyContent += `    ${currentProxyMethodName}: async (${paramsDeclaration}) => {\n`;
                    proxyContent += functionBodyContent;
                    proxyContent += `    },\n\n`;
                }
            }
        }
    });

    proxyContent += `};\n`;

    // 將生成的內容寫入檔案
    Deno.writeTextFile(OUTPUT_PATH, proxyContent, {
        create: true,
        append: false
    })
    .then(() => {
        console.log(`[API Proxy 生成器] ${OUTPUT_PATH} 已成功生成。`);
    })
    .catch((error) => {
        console.error(`[API Proxy 生成器] 寫入檔案失敗:`, error);
    });
}
